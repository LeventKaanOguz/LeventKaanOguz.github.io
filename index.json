[{"categories":[],"content":"Solution to Case Study 1 of Python for Research by HarvardX.","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"Introduction to Problem from HarvardX A cipher is a secret code for a language. In this case study, we will explore a cipher that is reported by contemporary Greek historians to have been used by Julius Caesar to send secret messages to generals during times of war. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:1:0","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"What is a Ceaser Cipher? The Caesar cipher shifts each letter of a message to another letter in the alphabet located a fixed distance from the original letter. If our encryption key were 1, we would shift h to the next letter i, i to the next letter j, and so on. If we reach the end of the alphabet, which for us is the space character, we simply loop back to a. To decode the message, we make a similar shift, except we move the same number of steps backwards in the alphabet. So, we now know about our topic and what is a Ceaser Cipher. We should read the exercises and go on with solutions. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:1:1","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"Exercises ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:0","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"Exercise 1 In this exercise, we will define the alphabet used in the cipher. The string library has been imported. Create a string called alphabet consisting of the space character ' ' followed by (concatenated with) the lowercase letters. Note that we’re only using the lowercase letters in this exercise. import string # write your code here! alphabet = \" \" + string.ascii_lowercase The above code creates a string called alphabet as intended. What is the string.ascii_lowercase part and why does it work? string.ascii_lowercase allows us to create a string that has English lowercase letters. There are also string.ascii_letters, which returns all English letters, and string.ascii_uppercase, which returns all letters in uppercase. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:1","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"Exercise 2 In this exercise, we will define a dictionary that specifies the index of each character in alphabet. alphabet has already defined in the last exercise. Create a dictionary with keys consisting of the characters in alphabet and values consisting of the numbers from 0 to 26. Store this as positions. # write your code here! positions = {} for idx, letter in enumerate(alphabet): positions[letter] = idx Works easily. However, how should we interpret this solution? What is enumerate() and what does it do? As you know, we need both indices and values, which leads to the question: How to do this in Python? And here comes the enumerate() built-in function. When enumerate() function returns too loopable (?) variables: The index (place of the letter) The value (letter) ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:2","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"Exercise 3 For simplicity, I will skip Exercise 3. Since it asks us to encode a sentence and I want to generalize the problem, let’s skip to Exercise 4, in which we have to create an encoder function. Just know that, later on, our will be encoded string is message = \"hi my name is caesar\". ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:3","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"Exercise 4 In this exercise, we will define a function that encodes a message with any given encryption key. alphabet, position and message remain defined from previous exercises. Define a function encoding that takes a message as input as well as an int encryption key key to encode a message with the Caesar cipher by shifting each letter in message by key positions. Your function should return a string consisting of these encoded letters. Use encoding to encode message using key = 3 and save the result as encoded_message. Print encoded_message. # write your code here def encoding(message, key): encoded_message = \"\" for i in message: new_letter = positions[i]+key if new_letter \u003e 26: new_letter %= 27 encoded_message += alphabet[new_letter] return encoded_message print(encoded_message=encoding(message, key=3)) Observe that we had to take the modulus of new_letter if it increases more than 26. This problem has one more exercise; however, I won’t be explaining it since decoding process is just backward, negative, of the encoding. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:4","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"How to create a blog website with Hugo and GitHub Pages?","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Prerequisites GitHub Account: You can open one from here. Also, basic GitHub knowledge is recommended but it is not a prerequisite. Hugo Extended Installation: You should follow the instructions appropiate for your system here. A Preffered Choice of Theme: You can of course build your own theme but it is better to choose one from here. For instance, I use LoveIt theme. Love for phys… just kidding, the other thing we need is to desire for this website. In this article, I will be using Windows 11 and Hugo Extended installation via Winget. You can use whatever OS you want; however, I highly encourage you to install extended version of Hugo. In this example, I will use my own name in code blocks or in many other places. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:1:0","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Initialization ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:2:0","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"GitHub Repositories First things first, you need to create two GitHub repositories. One will be called _Your_Username_.github.io and other one will be blog. The blog repository will be the place we store the code and, so called, LeventKaanOguz.github.io repository will be used to deploy our website. After creating your website using below section, you should create a .\\public\\ folder under the main folder (like blog\\public) and also create a folder under somewhere else as like LeventKaanOguz.github.io and push a README.md file. Also add LeventKaanOguz.github.io as a submodule to blog\\public. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:2:1","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Creating Website You can create a website via Powershell (terminal shell in Windows) using hugo new site \u003cname\u003e Change directory to new created folder and to the .\\themes\\. Now we need to install our theme. Almost all of the themes that are in Hugo Themes uses GitHub, so you can clone that you want directly from GitHub. We will be using LoveIt theme, which is this website’s theme. You can find detailed instruction on their website. To start your Hugo website in development mode, you should run hugo serve command. This will start your webserver at port 1313 (You can access it via http://localhost:1313/) and what you will see will pretty much some empty page without any posts. To create a post you should use the command hugo new posts/POST_NAME.md and write down all your Markdown article. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:2:2","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Deploying Your Website Now only thing left is to deploy your website. The only thing you need to do is to push all the changes in blog\\posts and now you are done. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:3:0","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"}]