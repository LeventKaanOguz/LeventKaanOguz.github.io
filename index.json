[{"categories":["C++ Journey"],"content":"First step in our C++ journey","date":"2023-12-13","objectID":"/c-journey-part-1/","tags":["C++"],"title":"C++ Journey: Part 1 - Introduction to Series","uri":"/c-journey-part-1/"},{"categories":["C++ Journey"],"content":"Introduction to Series ","date":"2023-12-13","objectID":"/c-journey-part-1/:1:0","tags":["C++"],"title":"C++ Journey: Part 1 - Introduction to Series","uri":"/c-journey-part-1/"},{"categories":["C++ Journey"],"content":"Why am I learning C++? So, the main thing is “Why am even bothering with this?”. As you may or may not know, I want to become a computational particle physicist, as my young mind inspires, and even though I hate programming, I have decided to study C++, Python, MATLAB, Mathematica, etc. But why C++? Well… Geant4 and ROOT are written especially for C++, so I must study C++. Then, what will be these category’s purpose? My main purpose for creating this category is to create an archive for learning C++ from a newbie physics major point of view, so that if I need to refresh my memory or just check something I can come back here and check it. ","date":"2023-12-13","objectID":"/c-journey-part-1/:1:1","tags":["C++"],"title":"C++ Journey: Part 1 - Introduction to Series","uri":"/c-journey-part-1/"},{"categories":["C++ Journey"],"content":"Starting Notes: What are our resources? The main resources of these notes are mentioned below: Programming – Principles and Practice Using C++ Murach’s C++ Programming I will mostly use the first book mentioned because it seemed more comprehensive for the time being. It may seem like I am copy-pasting but I will try to elaborate more on most of the topics and try to create more examples. ","date":"2023-12-13","objectID":"/c-journey-part-1/:1:2","tags":["C++"],"title":"C++ Journey: Part 1 - Introduction to Series","uri":"/c-journey-part-1/"},{"categories":["C++ Journey"],"content":"Actual C++ Part of This Article ","date":"2023-12-13","objectID":"/c-journey-part-1/:2:0","tags":["C++"],"title":"C++ Journey: Part 1 - Introduction to Series","uri":"/c-journey-part-1/"},{"categories":["C++ Journey"],"content":"How does C++ work? It was really fun to use the power of GitHub Copilot and create a mermaid diagram to show how a C++ program works or is created. We write the C++ source code, for example below code #include\u003ciostream\u003e int main() { std::cout \u003c\u003c \"Hello world!\" \u003c\u003c std::endl; return 0; } Run compiler, for example, g++ -E hello-world.cpp -o hello-world The compiler first runs the preprocessor, which evaluates header files, header files are not getting compiled. Second, the compiler takes the output from the preprocessor and makes an object file. ","date":"2023-12-13","objectID":"/c-journey-part-1/:2:1","tags":["C++"],"title":"C++ Journey: Part 1 - Introduction to Series","uri":"/c-journey-part-1/"},{"categories":["C++ Journey"],"content":"An example code In the above explanation, we have used a code you might remember #include\u003ciostream\u003e int main() { std::cout \u003c\u003c \"Hello world!\" \u003c\u003c std::endl; return 0; } Here first line includes our header file iostream. We need this line for std::cout and ‘std::endl’ to run. In the second line, we see a main function definition. Every C++ program has a main function, it is the first function that runs. In the fourth line, we see std::cout \u003c\u003c \"Hello world!\" \u003c\u003c std::endl;. This line of code prints out Hello world! sentence to the console and then gets to a new line. In the last line, we see return 0;. In this function, we must return an integer in order code to work. In C++, as a convention, returning 0 from the main function indicates that it ran successfully. ","date":"2023-12-13","objectID":"/c-journey-part-1/:2:2","tags":["C++"],"title":"C++ Journey: Part 1 - Introduction to Series","uri":"/c-journey-part-1/"},{"categories":["Python for Research"],"content":"Solution to Case Study 2 of Python for Research by HarvardX.","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Introduction to Problem from HarvardX In the six exercises of this case study, we will find and plot the distribution of word frequencies for different translations of Hamlet. Perhaps the distribution of word frequencies of Hamlet depends on the translation – let’s find out! For this case study, the functions count_words_fast and word_stats are defined as in the Case 2 Videos (Videos 3.2.1 through 3.2.6). The code for these functions, which you will need for the following exercises, is given here: import os import pandas as pd import numpy as np from collections import Counter def count_words_fast(text): text = text.lower() skips = [\".\", \",\", \";\", \":\", \"'\", '\"', \"\\n\", \"!\", \"?\", \"(\", \")\"] for ch in skips: text = text.replace(ch, \"\") word_counts = Counter(text.split(\" \")) return word_counts def word_stats(word_counts): num_unique = len(word_counts) counts = word_counts.values() return (num_unique, counts) Observe that we have used functions defined in the previous case study which has recorded videos, not the one we have the solutions and also called Case Study 2: Language Processing. I highly encourage watching the videos and answering the exercises. ","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/:1:0","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Exercises ","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/:2:0","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Exercise 1 Note that book_titles is a nested dictionary, containing book titles within authors within languages, all of which are strings. These books are all stored online, and are accessed throughout this case study. In Exercise 1, we will first read in and store each translation of Hamlet. Instructions Read in the data as a pandas dataframe using pd.read_csv. Use the index_col argument to set the first column in the csv file as the index for the dataframe. The data can be found at this link within the courseware, and at this link when coming from outside the courseware. Complete the following line of code to read in the data: hamlets = pd.read_csv(\"./hamlets.csv\", index_col=\"Unnamed: 0\") ## Complete this line of code! ## hamlets.head() It’s good practice to check whether or not our dataframe is correctly initialized. In this code block, we have used read_csv to read our .csv file and used index_col to select our index column as languages. Our expected output is shown below. Since this case study is much harder than the previous one, I will try to share my results as well as the code. ","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/:2:1","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Exercise 2 In Exercise 2, we will summarize the text for a single translation of Hamlet in a pandas dataframe. Instructions Find the dictionary of word frequency in text by calling count_words_fast(). Store this as counted_text. Create a pandas dataframe named data. Using counted_text, define two columns in data: word, consisting of each unique word in text. count, consisting of the number of times each word in word is included in the text. Here’s the code to get you started: How many times does the word Hamlet appear in the text? language, text = hamlets.iloc[0] # Enter your code here. counted_text = count_words_fast(text) data = pd.DataFrame(list(counted_text.items()), columns=['word', 'count']) counted_text[\"hamlet\"] And the expected output is 97. Here list(counted_text.items()) gives us a list of tuples of key and value pairs, which we can use to have the rows of our dataframe. ","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/:2:2","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Exercise 3 In Exercise 3, we will continue to define summary statistics for a single translation of Hamlet. Instructions Add a column to data named length, defined as the length of each word. Add another column named frequency, which is defined as follows for each word in data: -If count \u003e 10, frequency is “frequent”. -If 1 \u003c count \u003c= 10, frequency is “infrequent”. -If count == 1, frequency is “unique”. How many unique words appear in the text? Now we are coming to harder parts. From now on,I will try to elaborate more with the methods and variables I have used. # write your code here! def freq(row): if row[\"count\"] \u003e 10: return \"frequent\" elif 1\u003c row[\"count\"] \u003c=10: return \"infrequent\" else: return \"unique\" data[\"length\"] = data[\"word\"].apply(len) data[\"frequency\"] = data.apply(freq, axis=1) len(data[data[\"frequency\"] == \"unique\"]) Expected output is 3348. What does apply do? Now we need to understand what apply() method does. In the official documentation, it says “Apply a function along an axis of the DataFrame.”. However, there is one more point waiting to be explained. What is an “axis”? By default, the axis value is equal to 0. This means Pandas will apply the corresponding function (our first input) to each column. If it was equal to 1, it would apply to each row. ","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/:2:3","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Exercise 4 In Exercise 4, we will summarize the statistics in data into a smaller pandas dataframe. Instructions Create a pandas dataframe named sub_data including the following columns: language, which is the language of the text (defined in Exercise 2). frequency, which is a list containing the strings “frequent”, “infrequent”, and “unique”. mean_word_length, which is the mean word length of each value in frequency. num_words, which is the total number of words in each frequency category. What is the average word length of the infrequent words? Here comes the hardest part of this case study for me. # write your code here! languages = [\"English\", \"German\", \"Portuguese\"] frequencies = [\"frequent\", \"infrequent\", \"unique\"] data_list = [] for lang in languages: for freq in frequencies: data_prime = data[data[\"frequency\"] == freq] mean_word_length = data_prime[\"length\"].mean() num_words = data_prime[\"count\"].sum() data_list.append([lang, freq, mean_word_length, num_words]) sub_data = pd.DataFrame(data_list, columns=['language', 'frequency', 'mean_word_length', 'num_words']) sub_data.loc[sub_data['frequency'] == 'infrequent', 'mean_word_length'].values[0] Expected result is 5.825242718446602. Alright, I mostly do not remember how I wrote this part of the code but I will try to elaborate with it. Moreover, in later exercises, HarvardX recommends another approach. I will stick with mine for now. Since we need to group by frequency – if you check what we need you can easily see that – first we create a new dataframe called data_prime to store our new dataframe with selected frequency. After that, rest is history. In the last line, we needed to find average word length of the infrequent words and we have found that with using loc[] attribute. ","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/:2:4","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Exercise 5 In the last two exercises, we wrap up what we have covered until now. In Exercise 5, we will join all the data summaries for text Hamlet translation. Instructions The previous code for summarizing a particular translation of Hamlet is consolidated into a single function called summarize_text. Create a pandas dataframe grouped_data consisting of the results of summarize_text for each translation of Hamlet in hamlets. Use a for loop across the row indices of hamlets to assign each translation to a new row. Obtain the ith row of hamlets to variables using the .iloc method, and assign the output to variables language and text. Call summarize_text using language and text, and assign the output to sub_data. Use the pandas .append() function to append pandas dataframes row-wise to grouped_data. The code below defines summarize_text: What is the average word length of the frequent words in the German translation? How many frequent words are there in the Portugese translation? def summarize_text(language, text): counted_text = count_words_fast(text) data = pd.DataFrame({ \"word\": list(counted_text.keys()), \"count\": list(counted_text.values()) }) data.loc[data[\"count\"] \u003e 10, \"frequency\"] = \"frequent\" data.loc[data[\"count\"] \u003c= 10, \"frequency\"] = \"infrequent\" data.loc[data[\"count\"] == 1, \"frequency\"] = \"unique\" data[\"length\"] = data[\"word\"].apply(len) sub_data = pd.DataFrame({ \"language\": language, \"frequency\": [\"frequent\",\"infrequent\",\"unique\"], \"mean_word_length\": data.groupby(by = \"frequency\")[\"length\"].mean(), \"num_words\": data.groupby(by = \"frequency\").size() }) return(sub_data) # write your code here! grouped_data = pd.DataFrame() for idx in range(3): language, text = hamlets.iloc[idx][\"language\"], hamlets.iloc[idx][\"text\"] sub_data = summarize_text(language, text) grouped_data = pd.concat([grouped_data, sub_data]) grouped_data Expected output is a dataframe: Here you can easily find expected results. Now, let’s check how our solution works. First, we have created a dataframe called grouped_data. Then, from 0 to 2, we have a loop and we have one-by-one assign language and text and use these as input while using summarize_text(). Since the last exercise is abnormally easy, I won’t be talking about it. ","date":"2023-11-11","objectID":"/python-for-research-case-study-2-solution/:2:5","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 2 Solution","uri":"/python-for-research-case-study-2-solution/"},{"categories":["Python for Research"],"content":"Solution to Case Study 1 of Python for Research by HarvardX.","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":["Python for Research"],"content":"Introduction to Problem from HarvardX A cipher is a secret code for a language. In this case study, we will explore a cipher that is reported by contemporary Greek historians to have been used by Julius Caesar to send secret messages to generals during times of war. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:1:0","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":["Python for Research"],"content":"What is a Ceaser Cipher? The Caesar cipher shifts each letter of a message to another letter in the alphabet located a fixed distance from the original letter. If our encryption key were 1, we would shift h to the next letter i, i to the next letter j, and so on. If we reach the end of the alphabet, which for us is the space character, we simply loop back to a. To decode the message, we make a similar shift, except we move the same number of steps backwards in the alphabet. So, we now know about our topic and what is a Ceaser Cipher. We should read the exercises and go on with solutions. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:1:1","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":["Python for Research"],"content":"Exercises ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:0","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":["Python for Research"],"content":"Exercise 1 In this exercise, we will define the alphabet used in the cipher. The string library has been imported. Create a string called alphabet consisting of the space character ' ' followed by (concatenated with) the lowercase letters. Note that we’re only using the lowercase letters in this exercise. import string # write your code here! alphabet = \" \" + string.ascii_lowercase The above code creates a string called alphabet as intended. What is the string.ascii_lowercase part and why does it work? string.ascii_lowercase allows us to create a string that has English lowercase letters. There are also string.ascii_letters, which returns all English letters, and string.ascii_uppercase, which returns all letters in uppercase. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:1","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":["Python for Research"],"content":"Exercise 2 In this exercise, we will define a dictionary that specifies the index of each character in alphabet. alphabet has already defined in the last exercise. Create a dictionary with keys consisting of the characters in alphabet and values consisting of the numbers from 0 to 26. Store this as positions. # write your code here! positions = {} for idx, letter in enumerate(alphabet): positions[letter] = idx Works easily. However, how should we interpret this solution? What is enumerate() and what does it do? As you know, we need both indices and values, which leads to the question: How to do this in Python? And here comes the enumerate() built-in function. When enumerate() function returns too loopable (?) variables: The index (place of the letter) The value (letter) ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:2","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":["Python for Research"],"content":"Exercise 3 For simplicity, I will skip Exercise 3. Since it asks us to encode a sentence and I want to generalize the problem, let’s skip to Exercise 4, in which we have to create an encoder function. Just know that, later on, our will be encoded string is message = \"hi my name is caesar\". ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:3","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":["Python for Research"],"content":"Exercise 4 In this exercise, we will define a function that encodes a message with any given encryption key. alphabet, position and message remain defined from previous exercises. Define a function encoding that takes a message as input as well as an int encryption key key to encode a message with the Caesar cipher by shifting each letter in message by key positions. Your function should return a string consisting of these encoded letters. Use encoding to encode message using key = 3 and save the result as encoded_message. Print encoded_message. # write your code here def encoding(message, key): encoded_message = \"\" for i in message: new_letter = positions[i]+key if new_letter \u003e 26: new_letter %= 27 encoded_message += alphabet[new_letter] return encoded_message print(encoded_message=encoding(message, key=3)) Observe that we had to take the modulus of new_letter if it increases more than 26. This problem has one more exercise; however, I won’t be explaining it since the decoding process is just backward, negative, of the encoding. ","date":"2023-11-06","objectID":"/python-for-research-case-study-1-solution/:2:4","tags":["Python"],"title":"Python for Research - HarvardX - Case Study 1 Solution","uri":"/python-for-research-case-study-1-solution/"},{"categories":[],"content":"How to create a blog website with Hugo and GitHub Pages?","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Prerequisites GitHub Account: You can open one from here. Also, basic GitHub knowledge is recommended but it is not a prerequisite. Hugo Extended Installation: You should follow the instructions appropiate for your system here. A Preffered Choice of Theme: You can of course build your own theme but it is better to choose one from here. For instance, I use LoveIt theme. Love for phys… just kidding, the other thing we need is to desire for this website. In this article, I will be using Windows 11 and Hugo Extended installation via Winget. You can use whatever OS you want; however, I highly encourage you to install extended version of Hugo. In this example, I will use my own name in code blocks or in many other places. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:1:0","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Initialization ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:2:0","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"GitHub Repositories First things first, you need to create two GitHub repositories. One will be called _Your_Username_.github.io and other one will be blog. The blog repository will be the place we store the code and, so called, LeventKaanOguz.github.io repository will be used to deploy our website. After creating your website using below section, you should create a .\\public\\ folder under the main folder (like blog\\public) and also create a folder under somewhere else as like LeventKaanOguz.github.io and push a README.md file. Also add LeventKaanOguz.github.io as a submodule to blog\\public. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:2:1","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Creating Website You can create a website via Powershell (terminal shell in Windows) using hugo new site \u003cname\u003e Change directory to new created folder and to the .\\themes\\. Now we need to install our theme. Almost all of the themes that are in Hugo Themes uses GitHub, so you can clone that you want directly from GitHub. We will be using LoveIt theme, which is this website’s theme. You can find detailed instruction on their website. To start your Hugo website in development mode, you should run hugo serve command. This will start your webserver at port 1313 (You can access it via http://localhost:1313/) and what you will see will pretty much some empty page without any posts. To create a post you should use the command hugo new posts/POST_NAME.md and write down all your Markdown article. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:2:2","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"},{"categories":[],"content":"Deploying Your Website Now only thing left is to deploy your website. The only thing you need to do is to push all the changes in blog\\posts and now you are done. ","date":"2023-11-02","objectID":"/using-github-pages-to-create-a-blog/:3:0","tags":["GitHub","Hugo"],"title":"Using GitHub Pages to Create a Blog","uri":"/using-github-pages-to-create-a-blog/"}]